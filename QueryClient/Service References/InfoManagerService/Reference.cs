//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryClient.InfoManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlgMold", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    public enum FlgMold : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Product = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Series = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Firm = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryResult = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Others = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryTargetInfo", Namespace="http://schemas.datacontract.org/2004/07/QueryService")]
    [System.SerializableAttribute()]
    public partial class QueryTargetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImgPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SimpleInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VoicePathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImgPath {
            get {
                return this.ImgPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgPathField, value) != true)) {
                    this.ImgPathField = value;
                    this.RaisePropertyChanged("ImgPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentName {
            get {
                return this.ParentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentNameField, value) != true)) {
                    this.ParentNameField = value;
                    this.RaisePropertyChanged("ParentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SimpleInfo {
            get {
                return this.SimpleInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.SimpleInfoField, value) != true)) {
                    this.SimpleInfoField = value;
                    this.RaisePropertyChanged("SimpleInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VoicePath {
            get {
                return this.VoicePathField;
            }
            set {
                if ((object.ReferenceEquals(this.VoicePathField, value) != true)) {
                    this.VoicePathField = value;
                    this.RaisePropertyChanged("VoicePath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryTarget", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(QueryClient.InfoManagerService.Firm))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(QueryClient.InfoManagerService.Series))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(QueryClient.InfoManagerService.Product))]
    public partial class QueryTarget : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private QueryClient.InfoManagerService.Flg[] Flgsk__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string ImgPathk__BackingFieldField;
        
        private string Infok__BackingFieldField;
        
        private string Namek__BackingFieldField;
        
        private string Remarkk__BackingFieldField;
        
        private string SimpleInfok__BackingFieldField;
        
        private string VoicePathk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Flgs>k__BackingField", IsRequired=true)]
        public QueryClient.InfoManagerService.Flg[] Flgsk__BackingField {
            get {
                return this.Flgsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Flgsk__BackingFieldField, value) != true)) {
                    this.Flgsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Flgsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField {
            get {
                return this.Idk__BackingFieldField;
            }
            set {
                if ((this.Idk__BackingFieldField.Equals(value) != true)) {
                    this.Idk__BackingFieldField = value;
                    this.RaisePropertyChanged("Idk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ImgPath>k__BackingField", IsRequired=true)]
        public string ImgPathk__BackingField {
            get {
                return this.ImgPathk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgPathk__BackingFieldField, value) != true)) {
                    this.ImgPathk__BackingFieldField = value;
                    this.RaisePropertyChanged("ImgPathk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Info>k__BackingField", IsRequired=true)]
        public string Infok__BackingField {
            get {
                return this.Infok__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Infok__BackingFieldField, value) != true)) {
                    this.Infok__BackingFieldField = value;
                    this.RaisePropertyChanged("Infok__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Name>k__BackingField", IsRequired=true)]
        public string Namek__BackingField {
            get {
                return this.Namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Namek__BackingFieldField, value) != true)) {
                    this.Namek__BackingFieldField = value;
                    this.RaisePropertyChanged("Namek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Remark>k__BackingField", IsRequired=true)]
        public string Remarkk__BackingField {
            get {
                return this.Remarkk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Remarkk__BackingFieldField, value) != true)) {
                    this.Remarkk__BackingFieldField = value;
                    this.RaisePropertyChanged("Remarkk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SimpleInfo>k__BackingField", IsRequired=true)]
        public string SimpleInfok__BackingField {
            get {
                return this.SimpleInfok__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SimpleInfok__BackingFieldField, value) != true)) {
                    this.SimpleInfok__BackingFieldField = value;
                    this.RaisePropertyChanged("SimpleInfok__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<VoicePath>k__BackingField", IsRequired=true)]
        public string VoicePathk__BackingField {
            get {
                return this.VoicePathk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.VoicePathk__BackingFieldField, value) != true)) {
                    this.VoicePathk__BackingFieldField = value;
                    this.RaisePropertyChanged("VoicePathk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Firm", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    [System.SerializableAttribute()]
    public partial class Firm : QueryClient.InfoManagerService.QueryTarget {
        
        private QueryClient.InfoManagerService.Series[] SeriesListk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SeriesList>k__BackingField", IsRequired=true)]
        public QueryClient.InfoManagerService.Series[] SeriesListk__BackingField {
            get {
                return this.SeriesListk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SeriesListk__BackingFieldField, value) != true)) {
                    this.SeriesListk__BackingFieldField = value;
                    this.RaisePropertyChanged("SeriesListk__BackingField");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Series", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    [System.SerializableAttribute()]
    public partial class Series : QueryClient.InfoManagerService.QueryTarget {
        
        private System.Nullable<int> FirmIdk__BackingFieldField;
        
        private QueryClient.InfoManagerService.Firm Firmk__BackingFieldField;
        
        private QueryClient.InfoManagerService.Product[] ProductListk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<FirmId>k__BackingField", IsRequired=true)]
        public System.Nullable<int> FirmIdk__BackingField {
            get {
                return this.FirmIdk__BackingFieldField;
            }
            set {
                if ((this.FirmIdk__BackingFieldField.Equals(value) != true)) {
                    this.FirmIdk__BackingFieldField = value;
                    this.RaisePropertyChanged("FirmIdk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Firm>k__BackingField", IsRequired=true)]
        public QueryClient.InfoManagerService.Firm Firmk__BackingField {
            get {
                return this.Firmk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Firmk__BackingFieldField, value) != true)) {
                    this.Firmk__BackingFieldField = value;
                    this.RaisePropertyChanged("Firmk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ProductList>k__BackingField", IsRequired=true)]
        public QueryClient.InfoManagerService.Product[] ProductListk__BackingField {
            get {
                return this.ProductListk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductListk__BackingFieldField, value) != true)) {
                    this.ProductListk__BackingFieldField = value;
                    this.RaisePropertyChanged("ProductListk__BackingField");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    [System.SerializableAttribute()]
    public partial class Product : QueryClient.InfoManagerService.QueryTarget {
        
        private System.Nullable<int> SeriesIdk__BackingFieldField;
        
        private QueryClient.InfoManagerService.Series Seriesk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SeriesId>k__BackingField", IsRequired=true)]
        public System.Nullable<int> SeriesIdk__BackingField {
            get {
                return this.SeriesIdk__BackingFieldField;
            }
            set {
                if ((this.SeriesIdk__BackingFieldField.Equals(value) != true)) {
                    this.SeriesIdk__BackingFieldField = value;
                    this.RaisePropertyChanged("SeriesIdk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Series>k__BackingField", IsRequired=true)]
        public QueryClient.InfoManagerService.Series Seriesk__BackingField {
            get {
                return this.Seriesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Seriesk__BackingFieldField, value) != true)) {
                    this.Seriesk__BackingFieldField = value;
                    this.RaisePropertyChanged("Seriesk__BackingField");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flg", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    [System.SerializableAttribute()]
    public partial class Flg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private QueryClient.InfoManagerService.ReturnMold FlgNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private QueryClient.InfoManagerService.FlgMold QueryTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> QueryTargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private QueryClient.InfoManagerService.QueryMold QueryTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public QueryClient.InfoManagerService.ReturnMold FlgNumber {
            get {
                return this.FlgNumberField;
            }
            set {
                if ((this.FlgNumberField.Equals(value) != true)) {
                    this.FlgNumberField = value;
                    this.RaisePropertyChanged("FlgNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnable {
            get {
                return this.IsEnableField;
            }
            set {
                if ((this.IsEnableField.Equals(value) != true)) {
                    this.IsEnableField = value;
                    this.RaisePropertyChanged("IsEnable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public QueryClient.InfoManagerService.FlgMold QueryTable {
            get {
                return this.QueryTableField;
            }
            set {
                if ((this.QueryTableField.Equals(value) != true)) {
                    this.QueryTableField = value;
                    this.RaisePropertyChanged("QueryTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> QueryTarget {
            get {
                return this.QueryTargetField;
            }
            set {
                if ((this.QueryTargetField.Equals(value) != true)) {
                    this.QueryTargetField = value;
                    this.RaisePropertyChanged("QueryTarget");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public QueryClient.InfoManagerService.QueryMold QueryType {
            get {
                return this.QueryTypeField;
            }
            set {
                if ((this.QueryTypeField.Equals(value) != true)) {
                    this.QueryTypeField = value;
                    this.RaisePropertyChanged("QueryType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReturnMold", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    public enum ReturnMold : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Text = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Image = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Voice = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Url = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FilePath = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Others = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryMold", Namespace="http://schemas.datacontract.org/2004/07/AnjiSmart.Query.QueryModel")]
    public enum QueryMold : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weixin = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ShotMsg = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Web = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Phone = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Innner = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Debug = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InfoManagerService.IInfoManagerService")]
    public interface IInfoManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetChildTargets1", ReplyAction="http://tempuri.org/IInfoManagerService/GetChildTargets1Response")]
        QueryClient.InfoManagerService.QueryTargetInfo[] GetChildTargets1(QueryClient.InfoManagerService.FlgMold mold, int targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetChildTargets1", ReplyAction="http://tempuri.org/IInfoManagerService/GetChildTargets1Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetChildTargets1Async(QueryClient.InfoManagerService.FlgMold mold, int targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetChildTargets2", ReplyAction="http://tempuri.org/IInfoManagerService/GetChildTargets2Response")]
        QueryClient.InfoManagerService.QueryTargetInfo[] GetChildTargets2(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetChildTargets2", ReplyAction="http://tempuri.org/IInfoManagerService/GetChildTargets2Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetChildTargets2Async(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetParentTarget", ReplyAction="http://tempuri.org/IInfoManagerService/GetParentTargetResponse")]
        QueryClient.InfoManagerService.QueryTargetInfo GetParentTarget(QueryClient.InfoManagerService.FlgMold mold, int targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetParentTarget", ReplyAction="http://tempuri.org/IInfoManagerService/GetParentTargetResponse")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetParentTargetAsync(QueryClient.InfoManagerService.FlgMold mold, int targetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetParentTarget1", ReplyAction="http://tempuri.org/IInfoManagerService/GetParentTarget1Response")]
        QueryClient.InfoManagerService.QueryTargetInfo GetParentTarget1(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetParentTarget1", ReplyAction="http://tempuri.org/IInfoManagerService/GetParentTarget1Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetParentTarget1Async(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo", ReplyAction="http://tempuri.org/IInfoManagerService/GetSingleTargetInfoResponse")]
        QueryClient.InfoManagerService.QueryTargetInfo GetSingleTargetInfo(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo", ReplyAction="http://tempuri.org/IInfoManagerService/GetSingleTargetInfoResponse")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetSingleTargetInfoAsync(QueryClient.InfoManagerService.FlgMold mold, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo1", ReplyAction="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo1Response")]
        QueryClient.InfoManagerService.QueryTargetInfo GetSingleTargetInfo1(QueryClient.InfoManagerService.FlgMold mold, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo1", ReplyAction="http://tempuri.org/IInfoManagerService/GetSingleTargetInfo1Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetSingleTargetInfo1Async(QueryClient.InfoManagerService.FlgMold mold, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetInfo", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetInfoResponse")]
        QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetInfo(QueryClient.InfoManagerService.FlgMold mold, string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetInfo", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetInfoResponse")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetInfoAsync(QueryClient.InfoManagerService.FlgMold mold, string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetNames", ReplyAction="http://tempuri.org/IInfoManagerService/GetNamesResponse")]
        string[] GetNames(QueryClient.InfoManagerService.FlgMold mold, string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetNames", ReplyAction="http://tempuri.org/IInfoManagerService/GetNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetNamesAsync(QueryClient.InfoManagerService.FlgMold mold, string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetList", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetListResponse")]
        QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetList(QueryClient.InfoManagerService.FlgMold mold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetList", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetListResponse")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetListAsync(QueryClient.InfoManagerService.FlgMold mold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetList1", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetList1Response")]
        QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetList1(QueryClient.InfoManagerService.FlgMold mold, int take, int skip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetTargetList1", ReplyAction="http://tempuri.org/IInfoManagerService/GetTargetList1Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetList1Async(QueryClient.InfoManagerService.FlgMold mold, int take, int skip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/UpdateTarget", ReplyAction="http://tempuri.org/IInfoManagerService/UpdateTargetResponse")]
        int UpdateTarget(QueryClient.InfoManagerService.QueryTarget newTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/UpdateTarget", ReplyAction="http://tempuri.org/IInfoManagerService/UpdateTargetResponse")]
        System.Threading.Tasks.Task<int> UpdateTargetAsync(QueryClient.InfoManagerService.QueryTarget newTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgsResponse")]
        QueryClient.InfoManagerService.Flg GetFlgs(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgsResponse")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg> GetFlgsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs1", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs1Response")]
        QueryClient.InfoManagerService.Flg[] GetFlgs1(int targetId, QueryClient.InfoManagerService.FlgMold tarMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs1", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs1Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs1Async(int targetId, QueryClient.InfoManagerService.FlgMold tarMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs2", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs2Response")]
        QueryClient.InfoManagerService.Flg[] GetFlgs2(int targetId, QueryClient.InfoManagerService.FlgMold tarMold, QueryClient.InfoManagerService.QueryMold queryMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs2", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs2Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs2Async(int targetId, QueryClient.InfoManagerService.FlgMold tarMold, QueryClient.InfoManagerService.QueryMold queryMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs3", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs3Response")]
        QueryClient.InfoManagerService.Flg[] GetFlgs3(string targetName, QueryClient.InfoManagerService.FlgMold tarMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs3", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs3Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs3Async(string targetName, QueryClient.InfoManagerService.FlgMold tarMold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs4", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs4Response")]
        QueryClient.InfoManagerService.Flg[] GetFlgs4(QueryClient.InfoManagerService.QueryTarget target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/GetFlgs4", ReplyAction="http://tempuri.org/IInfoManagerService/GetFlgs4Response")]
        System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs4Async(QueryClient.InfoManagerService.QueryTarget target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/UpdateFlg", ReplyAction="http://tempuri.org/IInfoManagerService/UpdateFlgResponse")]
        int UpdateFlg(QueryClient.InfoManagerService.Flg newFlg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/UpdateFlg", ReplyAction="http://tempuri.org/IInfoManagerService/UpdateFlgResponse")]
        System.Threading.Tasks.Task<int> UpdateFlgAsync(QueryClient.InfoManagerService.Flg newFlg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/AddFlg", ReplyAction="http://tempuri.org/IInfoManagerService/AddFlgResponse")]
        int AddFlg(QueryClient.InfoManagerService.Flg newFlg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/AddFlg", ReplyAction="http://tempuri.org/IInfoManagerService/AddFlgResponse")]
        System.Threading.Tasks.Task<int> AddFlgAsync(QueryClient.InfoManagerService.Flg newFlg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/TestConn", ReplyAction="http://tempuri.org/IInfoManagerService/TestConnResponse")]
        int TestConn(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoManagerService/TestConn", ReplyAction="http://tempuri.org/IInfoManagerService/TestConnResponse")]
        System.Threading.Tasks.Task<int> TestConnAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInfoManagerServiceChannel : global::QueryClient.InfoManagerService.IInfoManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InfoManagerServiceClient : System.ServiceModel.ClientBase<global::QueryClient.InfoManagerService.IInfoManagerService>, global::QueryClient.InfoManagerService.IInfoManagerService {
        
        public InfoManagerServiceClient() {
        }
        
        public InfoManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InfoManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfoManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfoManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo[] GetChildTargets1(QueryClient.InfoManagerService.FlgMold mold, int targetId) {
            return base.Channel.GetChildTargets1(mold, targetId);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetChildTargets1Async(QueryClient.InfoManagerService.FlgMold mold, int targetId) {
            return base.Channel.GetChildTargets1Async(mold, targetId);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo[] GetChildTargets2(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetChildTargets2(mold, name);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetChildTargets2Async(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetChildTargets2Async(mold, name);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo GetParentTarget(QueryClient.InfoManagerService.FlgMold mold, int targetId) {
            return base.Channel.GetParentTarget(mold, targetId);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetParentTargetAsync(QueryClient.InfoManagerService.FlgMold mold, int targetId) {
            return base.Channel.GetParentTargetAsync(mold, targetId);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo GetParentTarget1(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetParentTarget1(mold, name);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetParentTarget1Async(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetParentTarget1Async(mold, name);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo GetSingleTargetInfo(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetSingleTargetInfo(mold, name);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetSingleTargetInfoAsync(QueryClient.InfoManagerService.FlgMold mold, string name) {
            return base.Channel.GetSingleTargetInfoAsync(mold, name);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo GetSingleTargetInfo1(QueryClient.InfoManagerService.FlgMold mold, int id) {
            return base.Channel.GetSingleTargetInfo1(mold, id);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo> GetSingleTargetInfo1Async(QueryClient.InfoManagerService.FlgMold mold, int id) {
            return base.Channel.GetSingleTargetInfo1Async(mold, id);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetInfo(QueryClient.InfoManagerService.FlgMold mold, string keyWord) {
            return base.Channel.GetTargetInfo(mold, keyWord);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetInfoAsync(QueryClient.InfoManagerService.FlgMold mold, string keyWord) {
            return base.Channel.GetTargetInfoAsync(mold, keyWord);
        }
        
        public string[] GetNames(QueryClient.InfoManagerService.FlgMold mold, string keyWord) {
            return base.Channel.GetNames(mold, keyWord);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNamesAsync(QueryClient.InfoManagerService.FlgMold mold, string keyWord) {
            return base.Channel.GetNamesAsync(mold, keyWord);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetList(QueryClient.InfoManagerService.FlgMold mold) {
            return base.Channel.GetTargetList(mold);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetListAsync(QueryClient.InfoManagerService.FlgMold mold) {
            return base.Channel.GetTargetListAsync(mold);
        }
        
        public QueryClient.InfoManagerService.QueryTargetInfo[] GetTargetList1(QueryClient.InfoManagerService.FlgMold mold, int take, int skip) {
            return base.Channel.GetTargetList1(mold, take, skip);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.QueryTargetInfo[]> GetTargetList1Async(QueryClient.InfoManagerService.FlgMold mold, int take, int skip) {
            return base.Channel.GetTargetList1Async(mold, take, skip);
        }
        
        public int UpdateTarget(QueryClient.InfoManagerService.QueryTarget newTarget) {
            return base.Channel.UpdateTarget(newTarget);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTargetAsync(QueryClient.InfoManagerService.QueryTarget newTarget) {
            return base.Channel.UpdateTargetAsync(newTarget);
        }
        
        public QueryClient.InfoManagerService.Flg GetFlgs(int id) {
            return base.Channel.GetFlgs(id);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg> GetFlgsAsync(int id) {
            return base.Channel.GetFlgsAsync(id);
        }
        
        public QueryClient.InfoManagerService.Flg[] GetFlgs1(int targetId, QueryClient.InfoManagerService.FlgMold tarMold) {
            return base.Channel.GetFlgs1(targetId, tarMold);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs1Async(int targetId, QueryClient.InfoManagerService.FlgMold tarMold) {
            return base.Channel.GetFlgs1Async(targetId, tarMold);
        }
        
        public QueryClient.InfoManagerService.Flg[] GetFlgs2(int targetId, QueryClient.InfoManagerService.FlgMold tarMold, QueryClient.InfoManagerService.QueryMold queryMold) {
            return base.Channel.GetFlgs2(targetId, tarMold, queryMold);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs2Async(int targetId, QueryClient.InfoManagerService.FlgMold tarMold, QueryClient.InfoManagerService.QueryMold queryMold) {
            return base.Channel.GetFlgs2Async(targetId, tarMold, queryMold);
        }
        
        public QueryClient.InfoManagerService.Flg[] GetFlgs3(string targetName, QueryClient.InfoManagerService.FlgMold tarMold) {
            return base.Channel.GetFlgs3(targetName, tarMold);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs3Async(string targetName, QueryClient.InfoManagerService.FlgMold tarMold) {
            return base.Channel.GetFlgs3Async(targetName, tarMold);
        }
        
        public QueryClient.InfoManagerService.Flg[] GetFlgs4(QueryClient.InfoManagerService.QueryTarget target) {
            return base.Channel.GetFlgs4(target);
        }
        
        public System.Threading.Tasks.Task<QueryClient.InfoManagerService.Flg[]> GetFlgs4Async(QueryClient.InfoManagerService.QueryTarget target) {
            return base.Channel.GetFlgs4Async(target);
        }
        
        public int UpdateFlg(QueryClient.InfoManagerService.Flg newFlg) {
            return base.Channel.UpdateFlg(newFlg);
        }
        
        public System.Threading.Tasks.Task<int> UpdateFlgAsync(QueryClient.InfoManagerService.Flg newFlg) {
            return base.Channel.UpdateFlgAsync(newFlg);
        }
        
        public int AddFlg(QueryClient.InfoManagerService.Flg newFlg) {
            return base.Channel.AddFlg(newFlg);
        }
        
        public System.Threading.Tasks.Task<int> AddFlgAsync(QueryClient.InfoManagerService.Flg newFlg) {
            return base.Channel.AddFlgAsync(newFlg);
        }
        
        public int TestConn(string token) {
            return base.Channel.TestConn(token);
        }
        
        public System.Threading.Tasks.Task<int> TestConnAsync(string token) {
            return base.Channel.TestConnAsync(token);
        }
    }
}
